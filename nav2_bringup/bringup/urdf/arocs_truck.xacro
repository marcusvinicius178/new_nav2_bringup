<?xml version="1.0"?>
<robot name="sam_bot" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Material Definitions -->
<!-- Init colour -->
  <material name="black">
      <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="dark">
    <color rgba="0.3 0.3 0.3 1.0"/>
  </material>

  <material name="light_black">
    <color rgba="0.4 0.4 0.4 1.0"/>
  </material>

  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>

  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>

  <material name="grey">
    <color rgba="0.5 0.5 0.5 1.0"/>
  </material>

  <material name="orange">
    <color rgba="1.0 0.4235 0.0392 1.0"/>
  </material>

  <material name="brown">
    <color rgba="0.8706 0.8118 0.7647 1.0"/>
  </material>

  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="2.548"/>
  <xacro:property name="base_length" value="9.605"/>
  <xacro:property name="base_height" value="0.877"/> <!-- Calculado na mão-->
  <xacro:property name="cabin_height" value="1.833"/>
  <xacro:property name="cabin_width" value="2.140" />
  <xacro:property name="cabin_length" value="1.964" />



  <xacro:property name="wheel_mass" value="74"/> <!-- given by manual: https://jipco.com.sa/wp-content/uploads/2020/11/Arocs_4542_B_51_Std.pdf-->
  <xacro:property name="wheel_radius" value="0.536"/> <!-- given by manual: https://jipco.com.sa/wp-content/uploads/2020/11/Arocs_4542_B_51_Std.pdf-->
  <!-- webiste converter Michelin: https://tire-calc.com/pt/comparison/385-65-r22.5-and-385-55-r22.5/-->
  <xacro:property name="wheel_width" value="0.385"/> 
  <xacro:property name="wheel_ygap" value="0.025"/>
  <xacro:property name="wheel_zoff" value="0.341"/> <!-- Calculado na mão-->
  <xacro:property name="wheel_xoff" value="3.302"/> <!-- First shaft, Frontal-->
  <xacro:property name="wheel2_xoff" value="1.552"/> <!-- Second Shaft, Frontal-->
  <xacro:property name="wheel3_xoff" value="-2.152"/> <!-- Third Shaft, Rear -->
  <xacro:property name="wheel4_xoff" value="-3.502"/> <!-- Fourth Shaft, Rear -->

  <!-- Define the frontal shaft bar size-->
  <xacro:property name="steering_bar_radius" value="0.0536"/>
  <xacro:property name="steering_bar_length" value="2.548"/>

  <!-- Define axles properties for the steering wheels (frontal)-->
  <xacro:property name="axle_length" value="0.5"/>
  <xacro:property name="axle_radius" value="0.25"/>

      <!-- Define inertial property macros -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <mass value="${m}"/>
     <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0.0" izz="${(m/2) * r*r}"/>
    </inertial>
  </xacro:macro>


    <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <xacro:box_inertia m="500" w="${base_width}" d="${base_length}" h="${base_height}"/>

  </link>

    <!-- Robot Footprint -->
  <link name="base_footprint"/>

<!--Robot Footprint Visualization-->
  <!-- <link name="base_footprint">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry> 
        <box size="${base_length} ${base_width} 0.001"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>  -->
  
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

    <!-- Cabin -->
  <link name="cabin_link">
    <visual>
      <geometry>
        <box size="${cabin_length} ${cabin_width} ${cabin_height}"/>
      </geometry>
      <material name="Green">
        <color rgba="0 1.0 0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${cabin_length} ${cabin_width} ${cabin_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="300" w="${cabin_width}" d="${cabin_length}" h="${cabin_height}"/>
  </link>

  <joint name="cabin_joint" type="fixed">
    <parent link="base_link"/>
    <child link="cabin_link"/>
    <origin xyz="${base_length/2 - cabin_length/2} 0 ${wheel_zoff+base_height}" rpy="0 0 0"/>
  </joint>

   <!-- Bar Definition -->
  <xacro:macro name="horizontal_shaft" params="xpos ypos prefix_name ">
    <link name="${prefix_name}_horizontal_shaft_link">
      <visual>
        <geometry>
          <cylinder radius="${steering_bar_radius}" length="${steering_bar_length + wheel_ygap}"/>
        </geometry>
        <material name="green">
        </material>
        <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${steering_bar_radius}" length="${steering_bar_length}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
      </collision>
      <xacro:cylinder_inertia m="1" r="${steering_bar_radius}" h="${steering_bar_length}"/>
    </link>
  </xacro:macro>

    <!-- Horizontal shafts instances -->
  <xacro:horizontal_shaft xpos="0" ypos="0" prefix_name="first_shaft" />
  <xacro:horizontal_shaft xpos="0" ypos="0" prefix_name="second_shaft" />
  <xacro:horizontal_shaft xpos="0" ypos="0" prefix_name="third_shaft" />
  <xacro:horizontal_shaft xpos="0" ypos="0" prefix_name="fourth_shaft" />

    <!-- Horizontal shaft to base link connection -->
  <xacro:macro name="horizontal_shaft_joint" params="prefix_name xpos ypos">
    <joint name="${prefix_name}_horizontal_shaft_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix_name}_horizontal_shaft_link"/>
      <origin xyz="${xpos} ${ypos} ${-wheel_zoff}" rpy="0 0 ${pi/2}"/>
      <axis xyz="0 0 1"/>
      <!-- <limit lower="-0.131" upper="0.131" effort="10000000" velocity="1000000"/> --> <!-- Just if change to revolute joint-->
    </joint>
  </xacro:macro>

  <xacro:horizontal_shaft_joint prefix_name="first_shaft" xpos="${wheel_xoff}" ypos="0" />
  <xacro:horizontal_shaft_joint prefix_name="second_shaft" xpos="${wheel2_xoff}" ypos="0" />
  <xacro:horizontal_shaft_joint prefix_name="third_shaft" xpos="${wheel3_xoff}" ypos="0" />
  <xacro:horizontal_shaft_joint prefix_name="fourth_shaft" xpos="${wheel4_xoff}" ypos="0" />

    <!-- Define Steering Axle Links -->
  <xacro:macro name="steer" params="prefix xpos ypos">
    <link name="${prefix}_steering_link">
      <visual>
        <geometry>
          <cylinder radius="${axle_radius}" length="${axle_length}"/>
        </geometry>
        <material name="white"/>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${axle_radius}" length="${axle_length}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="2" r="${axle_radius}" h="${axle_length}"/>
    </link>
  </xacro:macro>

  <!-- The Creation of the Steering Links must come before the joints definition, otherwise Rviz will show TF error-->
  <xacro:steer prefix="front_right" xpos="${-0.0001}" ypos="${0.0001}" />
  <xacro:steer prefix="front_left" xpos="${-0.0001}" ypos="${-0.0001}" />

    <!-- Define Steer Joint Macros-->
  <xacro:macro name="steer_joint" params="prefix xpos ypos">
    <joint name="${prefix}_steer_joint" type="revolute">
      <parent link="first_shaft_horizontal_shaft_link" />
      <child link="${prefix}_steering_link" />
      <origin xyz="${xpos} ${ypos} ${-0.001}" rpy="0 0 0" />
      <axis xyz="0 0 1" />
      <limit lower="-0.524" upper="0.524" effort="10000000" velocity="1000000" />
    </joint>
  </xacro:macro>

  <xacro:steer_joint prefix="front_left" xpos="${base_width/2 + wheel_ygap}" ypos="0" />
  <xacro:steer_joint prefix="front_right" xpos="-${base_width/2 + wheel_ygap}" ypos="0" />


    <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix xpos ypos wheel_num">

      <!-- calculate moments of inertia -->
      <xacro:property name="wheel_mass" value="74"/>
      <xacro:property name="wheel_radius" value="0.536"/>
      <xacro:property name="ixx_iyy_inertia" value="0.5 * ${wheel_mass} * ${wheel_radius} * ${wheel_radius}"/>
      <xacro:property name="izz_inertia" value="${wheel_mass} * ${wheel_radius} * ${wheel_radius}"/>

      <link name="${prefix}_link">
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
          <geometry>
              <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
          </geometry>
          <material name="Gray">
            <color rgba="0.5 0.5 0.5 1.0"/>
          </material>
        </visual>
        <!-- Add mass and inertia -->
              <!-- Add mass and inertia -->
        <inertial>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <mass value="${wheel_mass}"/>
          <inertia ixx="${ixx_iyy_inertia}" ixy="0" ixz="0" iyy="${ixx_iyy_inertia}" iyz="0" izz="${izz_inertia}"/>
        </inertial>
        <collision>
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
          </geometry>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
          <xacro:if value="${wheel_num == 1 or wheel_num == 4}">
              <surface>
                <friction>
                  <ode>
                    <mu>1.0</mu>
                    <mu2>1.0</mu2>
                    <kp>5000000.0</kp>
                    <kd>1.0</kd>
                    <fdir1>1 0 0</fdir1>
                    <slip1>0.0</slip1>
                    <slip2>0.0</slip2>
                  </ode>
                </friction>
              </surface>
          </xacro:if>
          <xacro:unless value="${wheel_num == 1 or wheel_num == 4}">
              <surface>
                <friction>
                  <ode>
                    <mu>0.2</mu>
                    <mu2>0.2</mu2>
                    <kp>1000000.0</kp>
                    <kd>0.5</kd>
                    <fdir1>1 0 0</fdir1>
                    <slip1>0.0</slip1>
                    <slip2>0.0</slip2>
                  </ode>
                </friction>
              </surface>
          </xacro:unless>
        </collision>
        <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
      </link>

      <!-- condition to check which wheel is being instantiated -->
      <xacro:if value="${wheel_num == 1 or wheel_num == 4}">
        <!-- First and fourth wheels are continuous and children of the steering joints/base link -->
        <joint name="${prefix}_joint" type="continuous">
          <xacro:if value="${prefix == 'first_wheel_left' or prefix == 'first_wheel_right'}">
            <parent link="front_${prefix[12:]}_steering_link"/>
            <origin xyz="${xpos} ${ypos} 0" rpy="0 0 1.57"/>
          </xacro:if>
          <xacro:unless value="${prefix == 'first_wheel_left' or prefix == 'first_wheel_right'}">
            <parent link="fourth_shaft_horizontal_shaft_link"/>
            <origin xyz="${xpos} ${ypos} ${0}" rpy="0 0 1.57"/>
          </xacro:unless>
          <child link="${prefix}_link"/>
          <axis xyz="0 -1 0"/>
        </joint>
      </xacro:if>
      <xacro:unless value="${wheel_num == 1 or wheel_num == 4}">
          <!-- Second and third wheels are fixed type and children of respective shafts -->
        <joint name="${prefix}_joint" type="fixed">
          <parent link="${'second' if 'second' in prefix else 'third'}_shaft_horizontal_shaft_link"/>
          <child link="${prefix}_link"/>
          <origin xyz="${xpos} ${ypos} ${0}" rpy="0 0 1.57"/>
        </joint>
      </xacro:unless>
  </xacro:macro>


  <xacro:wheel prefix="first_wheel_left" xpos="0" ypos="${0}" wheel_num="1" />
  <xacro:wheel prefix="first_wheel_right" xpos="${0}" ypos="-${0}" wheel_num="1" />
  <!-- Except with the first wheels (steering), from second to fourth wheels are shaft's children-->
  <xacro:wheel prefix="second_wheel_left" xpos="${base_width/2 + wheel_ygap}" ypos="${0}" wheel_num="2" />
  <xacro:wheel prefix="second_wheel_right" xpos="-${base_width/2 + wheel_ygap}" ypos="${0}" wheel_num="2" />
  <xacro:wheel prefix="third_wheel_left" xpos="${base_width/2 + wheel_ygap}" ypos="${0}" wheel_num="3" />
  <xacro:wheel prefix="third_wheel_right" xpos="-${base_width/2 + wheel_ygap}" ypos="-${0}" wheel_num="3" />
  <xacro:wheel prefix="fourth_wheel_left" xpos="${base_width/2 + wheel_ygap}" ypos="${0}" wheel_num="4" />
  <xacro:wheel prefix="fourth_wheel_right" xpos="-${base_width/2 + wheel_ygap}" ypos="-${0}" wheel_num="4" />


<!--Sensors -->
  <!-- Imu Link-->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.25 0.25 0.25"/>
      </geometry>
      <material name="grey"/>
    </visual>

    <collision>
      <geometry>
        <box size="0.25 0.25 0.25"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0.4 0 0.5"/>
  </joint>

 <!-- LiDAR support base link -->
  <!-- <link name="lidar_base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
    
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.6 0.3"/>
      </geometry>
      <visual name="blue"/>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.6 0.3"/>
      </geometry>
    </collision>
  </link> -->

  <!-- Fixed joint between cabin_link and lidar_base_link -->
  <!-- <joint name="lidar_base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_base_link"/>
    <origin xyz="2.0 0 0.5" rpy="0 0 0"/> 
  </joint>   -->
  <!-- Position X = -0.99 Z = 1.035    Pitched 20 degrees down = -0.1745033 | 5 degrees =0.0425 --> 

<!-- Lidar-->
  <!--Lidar Link-->
  <link name="lidar_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.25"/>
      <inertia ixx="0.001"  ixy="0"  ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.108" length="0.15"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.108" length="0.15"/>
      </geometry>
      <material name="red"/>
    </visual>
  </link>

  <joint name= "lidar_to_support_link" type="fixed">
    <parent link="cabin_link"/>
    <child link="lidar_link"/>
    <origin xyz="${cabin_width/2 -0.108} 0.0 ${base_height + 0.15}" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo Plugins -->
    <!-- IMU -->
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
    <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <!-- <namespace>/demo</namespace> --> 
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>200</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

      <!-- LiDAR Sensor -->
  <gazebo reference="lidar_link">
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.000000</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.12</min> <!-- Calculated in the same rate of turtlebot example which the min range is = 3.5% of the max range-->
          <max>10.0</max> <!-- MAximum range of VLP 16 is 100 meters-->
          <resolution>0.015000</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo>

      <plugin name='ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>
        <ros>
        <!-- <namespace>/demo</namespace> -->
          <parameter name="cmd_vel_topic" value="cmd_vel"/>
          <parameter name="odom_topic" value="odom"/>
          <parameter name="distance_topic" value="distance"/>
        </ros>
          <update_rate>1.0</update_rate>
          <!-- wheels -->
          <front_left_joint>first_wheel_left_joint</front_left_joint>
          <front_right_joint>first_wheel_right_joint</front_right_joint>
          <rear_left_joint>fourth_wheel_left_joint</rear_left_joint>
          <rear_right_joint>fourth_wheel_right_joint</rear_right_joint>
          <left_steering_joint>front_left_steer_joint</left_steering_joint>
          <right_steering_joint>front_right_steer_joint</right_steering_joint>

          <!-- Max absolute steer angle for tyre in radians-->
          <!-- Any cmd_vel angular z greater than this would be capped -->
          <max_steer>0.6458</max_steer>

          <!-- Max absolute steering angle of steering wheel -->
          <max_steering_angle>7.85</max_steering_angle>

          <!-- Max absolute linear speed in m/s -->
          <max_speed>20</max_speed>

          <!-- PID tuning -->
          <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
          <left_steering_i_range>0 0</left_steering_i_range>
          <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
          <right_steering_i_range>0 0</right_steering_i_range>
          <linear_velocity_pid_gain>1000 0 1</linear_velocity_pid_gain>
          <linear_velocity_i_range>0 0</linear_velocity_i_range>

          <!-- output -->
          <publish_odom>true</publish_odom>
          <publish_odom_tf>true</publish_odom_tf>
          <publish_wheel_tf>true</publish_wheel_tf>
          <publish_distance>true</publish_distance>

          <odometry_frame>odom</odometry_frame>
          <robot_base_frame>base_footprint</robot_base_frame>


      </plugin>
  </gazebo>

  <gazebo>
    <plugin name="truck_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <!-- <namespace>/tb3</namespace> -->
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
        <joint_name>front_right_steer_joint</joint_name>
        <joint_name>front_left_steer_joint</joint_name>
        <joint_name>first_wheel_left_joint</joint_name>
        <joint_name>first_wheel_right_joint</joint_name>
        <joint_name>fourth_wheel_left_joint</joint_name>
        <joint_name>fourth_wheel_right_joint</joint_name>
    </plugin>
  </gazebo>

</robot>